<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.garb.gbcollector.web.dao.MemberDAO">
		<!-- changePassword -->
		<update id="changePassword" parameterType="deletememberVO">
			<![CDATA[
				update member set password=PACK_ENCRYPTION_DECRYPTION.FUNC_ENCRYPT(#{mempw}) where email=#{mememail}
			]]>
		</update>
	
		<!-- checkPassword -->
		<select id="checkPassword" resultType="int" parameterType="memberVO">
			<![CDATA[
				select count(*) from member where email=#{mememail} and password=PACK_ENCRYPTION_DECRYPTION.FUNC_ENCRYPT(#{mempw})
			]]>
		</select>

		<!-- resetPassword -->
		<update id="resetPassword" parameterType="deletememberVO">
			<![CDATA[
				update member set password=PACK_ENCRYPTION_DECRYPTION.FUNC_ENCRYPT(#{mempw}) where email=#{mememail}
			]]>
		</update>

		<!-- checkEmailForPw -->
		<select id="checkEmailForPw" parameterType="memberVO" resultType="Map">
			<![CDATA[
				select * from member where email= #{memnickname}
			]]>
		</select>	
	
		<!-- signoutnavermember -->
		<update id="signOutNaverMember" parameterType="deletememberVO">
			<![CDATA[
				update member set email = #{deletedmememail}, navermemid = #{deletednavermemid}, memdate = sysdate where email = #{mememail} and navermemid = #{navermemid}
			]]>
		</update>


		<!-- signoutgooglemember -->
		<update id="signOutGoogleMember" parameterType="deletememberVO">
			<![CDATA[
				update member set email = #{deletedmememail}, googleid = #{deletedgooglememid}, memdate = sysdate where email = #{mememail} and googleid = #{googlememid}
			]]>
		</update>

		<!-- signoutmember -->
		<update id="signOutMember" parameterType="deletememberVO">
			<![CDATA[
				update member set email = #{deletedmememail}, memdate = sysdate where email=#{mememail} and password=PACK_ENCRYPTION_DECRYPTION.FUNC_ENCRYPT(#{mempw})
			]]>
		</update>
		
		<!-- googlelogin -->
		<select id="googlelogin" resultType="String" parameterType="memberVO">
			<![CDATA[
				select nickname from member where googleid = #{googlememid}
			]]>
		</select>

		<!-- google  회원가입 -->
		<insert id="googlememberInsert" parameterType="memberVO">
			<![CDATA[
			insert into member(email,password,name,nickname,googleid)
			values(LOWER(#{mememail}),PACK_ENCRYPTION_DECRYPTION.FUNC_ENCRYPT(#{mempw}),#{memname},#{memnickname},#{googlememid})
			]]>
		</insert>

		<!-- 구글 아이디 체크 -->
		<select id="googleIdChk" resultType="map" parameterType="memberVO">
			<![CDATA[
				select * from member where googleid =#{googlememid}
			]]>
		</select>
		
		
		<!-- naverlogin -->
		<select id="naverlogin" resultType="map" parameterType="memberVO">
			<![CDATA[
				select nickname,email from member where navermemid = #{navermemid}
			]]>
		</select>


		<!-- naver  회원가입 -->
		<insert id="navermemberInsert" parameterType="memberVO">
			<![CDATA[
			insert into member(email,password,name,nickname,navermemid)
			values(LOWER(#{mememail}),PACK_ENCRYPTION_DECRYPTION.FUNC_ENCRYPT(#{mempw}),#{memname},#{memnickname},#{navermemid})
			]]>
		</insert>


		<!-- 네이버  체크 -->
		<select id="naverIdChk" resultType="map" parameterType="memberVO">
			<![CDATA[
				select * from member where navermemid =#{navermemid}
			]]>
		</select>
		
		<!-- 이메일 중복 체크 -->
		<select id="emailChk" resultType="int" parameterType="memberVO">
			<![CDATA[
				select count(*) from member where email = LOWER(#{memnickname})
			]]>
		</select>
		
		<!-- 닉네임 중복 체크 -->
		<select id="checkNickname" resultType="int" parameterType="memberVO">
			<![CDATA[
				select count(*) from member where nickname =#{memnickname}
			]]>
		</select>
	

		<!-- eclipse에서 암호화해 넣을 수 있는 코드 (AI활용 프로젝트-> DB)참조 -->
		<select id="login" resultType="map" parameterType="memberVO">
			<![CDATA[
				select nickname, name from member where email=#{mememail} and password=PACK_ENCRYPTION_DECRYPTION.FUNC_ENCRYPT(#{mempw})
			]]>
		</select>
	

	<!-- eclipse에서 암호화해 넣을 수 있는 코드 (AI활용 프로젝트-> DB)참조 -->
	<insert id="memberInsert" parameterType="memberVO" >
		<![CDATA[
			insert into member(email,password,name,nickname) 
			values(LOWER(#{mememail}),PACK_ENCRYPTION_DECRYPTION.FUNC_ENCRYPT(#{mempw}),#{memname},#{memnickname})
		]]>
	</insert>
	


</mapper>
